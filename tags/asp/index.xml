<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Asp on Igor Kulman</title>
    <link>https://blog.davidmacias.com/tags/asp/</link>
    <description>Recent content in Asp on Igor Kulman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>igor@kulman.sk (davidmacias)</managingEditor>
    <webMaster>igor@kulman.sk (davidmacias)</webMaster>
    <lastBuildDate>Wed, 15 Apr 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/asp/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using ETag to cache responses in NancyFX</title>
      <link>https://blog.davidmacias.com/using-etag-to-cache-responses-in-nancyfx/</link>
      <pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/using-etag-to-cache-responses-in-nancyfx/</guid>
      <description>&lt;p&gt;Caching data is usually a good idea, especially when creating APIs for mobile clients and the user may pay for each transferred byte. There are many approaches to caching data (I recommend reading &lt;a href=&#34;http://frontendplay.com/2013/05/22/http-caching-demystified/&#34;&gt;this article&lt;/a&gt;), in my last NancyFX project I used ETag.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ETag&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ETag is a HTTP header that acts as a hash of the data. When the server returns a response, it computes a hash of the data and sends it to the client. When the client requests the data again, it includes the ETag in its request. The server compares the ETag with the hash of the current data and if they match (the data did not change), it returns an empty responses with a HTTP 304 status code.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div data-gist=&#34;4e6d24d0fedfe8361c6b&#34; data-file=&#34;etagresponse.cs&#34;&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;NancyFX impelemntation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To implement caching using ETag in NancyFX I use a method in my base module&lt;/p&gt;

&lt;p&gt;There are two parameters in this method, because you may sometimes want to compute the ETag from only a part of the returned model.&lt;/p&gt;

&lt;p&gt;Using this method is the really simple&lt;/p&gt;

&lt;div data-gist=&#34;4e6d24d0fedfe8361c6b&#34; data-file=&#34;usage.cs&#34;&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Detecting tablets and smartphones in ASP.NET</title>
      <link>https://blog.davidmacias.com/detecting-tablets-and-smartphones-in-asp-net/</link>
      <pubDate>Mon, 22 Sep 2014 00:00:00 +0000</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/detecting-tablets-and-smartphones-in-asp-net/</guid>
      <description>&lt;p&gt;I recently worked on an ASP.NET application that needed to detect if users were coming from tablets or smartphones. The project used data from &lt;a href=&#34;http://user-agent-string.info/&#34;&gt;http://user-agent-string.info/&lt;/a&gt; to do this detection, but the result were not really good. We needed a better solution, so I came up with using &lt;a href=&#34;http://wurfl.sourceforge.net/&#34;&gt;WURFL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;WURFL, the Wireless Universal Resource FiLe, is a Device Description Repository (DDR), i.e. a software component that maps HTTP Request headers to the profile of the HTTP client (Desktop, Mobile Device, Tablet, etc.) that issued the request. Adding WURFL to your ASP.NET application is easy thanks to the &lt;a href=&#34;https://www.nuget.org/packages/WURFL_Official_API/&#34;&gt;WURFL_Official_API Nuget package&lt;/a&gt;. The Nuget package also contains definition file, so you just need to update the Nuget package once in a while to get your definition file up to date.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;After installing the Nuget package, you need to setup WURLF in your Global.asax file&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/dc65bf6d68aec59d57e2.js?file=wurlf_setup.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;I recommend setting the match mode to accuracy instead of speed, to get the best results. Using the WURFL library is also quite easy, just pass the user agent string and get the properties you want.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/dc65bf6d68aec59d57e2.js?file=wurfl_usage.cs&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>C# scripting console for ASP.NET MVC application</title>
      <link>https://blog.davidmacias.com/c-scripting-console-for-asp-net-mvc-application/</link>
      <pubDate>Thu, 09 Jan 2014 00:00:00 +0000</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/c-scripting-console-for-asp-net-mvc-application/</guid>
      <description>&lt;p&gt;In a recent larger ASP.NET MVC project running in Windows Azure I needed to provide the advanced users a way to execute custom scripts directly through the webbrowser. A kind of a scripting console where users can create and execute their own scripts, that interact with the project and automate some tasks (that would otherwise require too many clicks).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Choosing the language&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I thought about using Lua but I needed an easy way to integrate with some classes (repositories) used in the project. I decided to use C# as the scripting language and implement the scripting console using &lt;a href=&#34;http://msdn.microsoft.com/en-us/vstudio/roslyn.aspx&#34;&gt;Roslyn&lt;/a&gt;. Roslyn is a really neat project and I recommend taking a look at it, if you do not already know it.&lt;/p&gt;

&lt;p&gt;I extracted the main idea of my implementation of the scripting console and &lt;a href=&#34;http://igorkulman.github.io/WebConsole/&#34;&gt;posted it on GitHub&lt;/a&gt;. I will walk you through it in this blog post.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Basic implementation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My basic solution consists of a Textarea the user writes the script to, the script then gets executed by Roslyn and the final result is shown. I also included a basic Repository class to show, that the scripts can use classes from the project. In the real implementation I have a logger class showing the ongoing logs and results but as I said, the Github repo is just an extracted basic idea of the scripting console.&lt;/p&gt;

&lt;p&gt;To execute a C# script in your ASP.NET MVC (or any other) application, you first need to install the Roslyn package and its dependencies&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/8159321.js?file=roslyn-nuget.ps&#34;&gt;&lt;/script&gt;

&lt;p&gt;Let&amp;#8217;s suppose you have the C# script you want to execute in a string variable called command obtained from the mentioned Textarea. First, you need to create the scripting engine and a session&lt;/p&gt;

&lt;p&gt;There are ScriptEngine classes, one for C# and one for VB.NET so choose the one for C#. You can use any class as the context for the scripts. In the sample, I have a ScriptingContext class containing one public property of a type DataRepository. If you use a class as the context for the scripts, you can access all its properties (Repository of type DataRepository in my case) in the scripts.&lt;/p&gt;

&lt;p&gt;To use a class as the context for the scripts, just pass it to the Roslyn session&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/8159321.js?file=roslyn-session.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;If you want to use more than the core C# libraries, you need to do some referencing and importing. If you are using a class as the context for the scripts, you need to reference its assembly. Suppose you want to use classes and methods from System.Xml and System.Xml.Linq in your scripts. First, you need to add references to the session&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/8159321.js?file=roslyn-context.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;and then import them to the session&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/8159321.js?file=roslyn-import.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;Everything is set up now, so just execute the script and get the result&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/8159321.js?file=roslyn-exec.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;The result of the script is the result of the last expression of the script so I recommend using a logger class in the context if you want to get more information about the execution of your script.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks to Roslyn, I was able to create a really usable scripting console for the project and allow users to automate many tasks using C# scripts. This article and the demo project describe just the basics, there are many ways to make the experience better. I for example use the &lt;a href=&#34;http://codemirror.net/&#34;&gt;CodeMirror&lt;/a&gt; editor to provide C# syntax highlighting, to allow users to upload ZIP files they can process in their scripts, etc.&lt;/p&gt;

&lt;p&gt;Source code: &lt;a href=&#34;https://github.com/igorkulman/WebConsole&#34;&gt;WebConsole&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Detecting encoding of uploaded file in ASP.NET MVC</title>
      <link>https://blog.davidmacias.com/detecting-encoding-of-uploaded-file-in-asp-net-mvc/</link>
      <pubDate>Tue, 05 Feb 2013 00:00:00 +0000</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/detecting-encoding-of-uploaded-file-in-asp-net-mvc/</guid>
      <description>&lt;p&gt;Uploading a file in ASP.NET MVC is very easy, but there is no easy way to detect the encoding of a uploaded text file. However you can use the fact if you try to read the file with a wrong encoding, you get an DecoderFallbackException. So how do you put everything together?&lt;/p&gt;

&lt;p&gt;First, get a stream of the uploaded file.&lt;/p&gt;

&lt;div data-gist=&#34;5849381&#34;&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Next, read the whole file to a byte array&lt;/p&gt;

&lt;div data-gist=&#34;5849384&#34;&gt;&lt;/div&gt;

&lt;p&gt;Finally the trick is to try all the encodings you think the file may be in and chech if if fails or not&lt;/p&gt;

&lt;div data-gist=&#34;5849390&#34;&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>