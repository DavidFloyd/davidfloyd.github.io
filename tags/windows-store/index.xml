<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows Store on Igor Kulman</title>
    <link>https://blog.davidmacias.com/tags/windows-store/</link>
    <description>Recent content in Windows Store on Igor Kulman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>igor@kulman.sk (davidmacias)</managingEditor>
    <webMaster>igor@kulman.sk (davidmacias)</webMaster>
    <lastBuildDate>Wed, 15 Jun 2016 09:29:12 +0100</lastBuildDate>
    <atom:link href="/tags/windows-store/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Creating a simple Windows 10 game with Win2D</title>
      <link>https://blog.davidmacias.com/creating-a-simple-windows-10-game-with-win2d/</link>
      <pubDate>Wed, 15 Jun 2016 09:29:12 +0100</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/creating-a-simple-windows-10-game-with-win2d/</guid>
      <description>&lt;p&gt;Some time ago while looking at some pixel art work I got an idea to create a retro pixel art game for Windows 10. The choice was obvious, &lt;a href=&#34;https://www.microsoft.com/store/apps/9nblggh4xdln&#34;&gt;Sokoban&lt;/a&gt;. I have a very special relationship with the Sokoban game. The Delpi version of Sokoban was the first game I ever created. I later ported it to all the platforms I played with, namely J2ME (for my Siemens S60 phone), Linux (using Kylix which was basically a Delphi for Linux), Windows Phone 7 and now &lt;a href=&#34;https://www.microsoft.com/store/apps/9nblggh4xdln&#34;&gt;Sokoban Pixel&lt;/a&gt; for the Universal Windows Platform.&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/sokoban-gameplay.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Win2D&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I did not want to learn &lt;a href=&#34;https://unity3d.com/&#34;&gt;Unity&lt;/a&gt; and I considered it quite a overkill for such a simple game. &lt;a href=&#34;http://www.monogame.net/&#34;&gt;Monogame&lt;/a&gt; seemed like an obvious choice, because my Sokoban for Windows Phone 7 was written in XNA. But Monogame requires too much ceremony to install and set up so I was not very eager to use it. I found &lt;a href=&#34;https://github.com/Microsoft/Win2D&#34;&gt;Win2D&lt;/a&gt;. Win2D is an easy-to-use Windows Runtime API for immediate mode 2D graphics rendering with GPU acceleration. It is available to C# and C++ developers writing Windows apps for Windows 8.1, Windows Phone 8.1 and Windows 10. It utilizes the power of Direct2D, and integrates seamlessly with XAML and CoreWindow. This means you can create a normal XAML application, create all your non-gameplay screens in XAML and use Win2D just for the actual gameplay.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initial setup and loading resources&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To get started with Win2D just install the &lt;code&gt;Win2D.uwp&lt;/code&gt; Nuget package and add a &lt;code&gt;CanvasControl&lt;/code&gt; to your app. That&amp;rsquo;s it, no more setup required.&lt;/p&gt;

&lt;p&gt;Before drawing any resources you need to first load them. This should be done in the &lt;code&gt;CreateResources&lt;/code&gt; event of the &lt;code&gt;CanvasControl&lt;/code&gt;. This method should not be async so if you need to load your resources asynchronously (as you always do) you need to use a trick with a separate method&lt;/p&gt;

&lt;div data-gist=&#34;39f73f5117a02c94fbe3b85ec57bb8a8&#34; data-file=&#34;load.cs&#34;&gt;&lt;/div&gt;

&lt;p&gt;The code snippet also shows how to load a simple image as a resources. You probably will not need to load anything other that images in a simple game.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drawing the game&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To make the &lt;code&gt;CanvasControl&lt;/code&gt; draw your game you need to hook up the &lt;code&gt;Draw&lt;/code&gt; event and put all you rendering logic there. There are basically just two things you will want to render, text and images&lt;/p&gt;

&lt;div data-gist=&#34;39f73f5117a02c94fbe3b85ec57bb8a8&#34; data-file=&#34;draw.cs&#34;&gt;&lt;/div&gt;

&lt;p&gt;Both methods have many overloads so it is up to you to choose the one that suits you best. There are also other methods for drawing primitives like likes or circles, take a look at the &lt;a href=&#34;http://microsoft.github.io/Win2D/html/Introduction.htm&#34;&gt;documentation&lt;/a&gt;. When creating a pixel art game, make use you use the &lt;code&gt;CanvasImageInterpolation.NearestNeighbor&lt;/code&gt; otherwise your images will look blurred if not on sufficient resolution.&lt;/p&gt;

&lt;p&gt;Depending on the type of your game, you may need to refresh the game canvas periodically or just as a reaction to the user input. In both cases, just call &lt;code&gt;Invalidate()&lt;/code&gt; on your &lt;code&gt;CanvasControl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Handling user input&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to make you game great on Windows 10, you need to handle a few different input methods because Windows 10 runs on a variety of different devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Keyboard and controller&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First you should handle input from the keyboard, so the game is comfortably playable on a notebook or desktop PC. To do this, you can just subscribe to the &lt;code&gt;KeyUp&lt;/code&gt; method of the current page or to the global &lt;code&gt;Window.Current.CoreWindow.KeyUp&lt;/code&gt; event. Both events give you a &lt;code&gt;VirtualKey&lt;/code&gt; that the user pressed and you just decide what to do.&lt;/p&gt;

&lt;p&gt;If you want to make your game playable on the XBox One or on the PC with a XBox One controller, you should handle the controller input. Handling the controller input is the same as handling the keyboard, you just check for different keys. The resulting code may look like this.&lt;/p&gt;

&lt;div data-gist=&#34;39f73f5117a02c94fbe3b85ec57bb8a8&#34; data-file=&#34;input.cs&#34;&gt;&lt;/div&gt;

&lt;p&gt;If you want to make your game run on XBox One and do not have an XBox One to test it, just get the XBox One controller, connect it to your PC with an USB cable and make sure the whole game is controllable and playable just with it, without the keyboard or mouse.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Touch devices&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Making your game playable on a phone or on a tablet is a bit tricky. There are no input devices usually attached, so you have to come up with your own. There are many ways to handle this. You can recognizes swipes on the device, or make the user tilt the device. But the solution I like the best is to render a simple d-pad in the right corner of the screen. This way the user can hold the device in both hands and use the right thumb to play the game.&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/sokoban-dpad.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When building a simple 2D game for Windows 10, making it a UWP app and use Win2D. The Win2D framework is easy to work with and embed into UWP apps.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating better forms in Windows Phone apps</title>
      <link>https://blog.davidmacias.com/creating-better-forms-in-windows-phone-apps/</link>
      <pubDate>Tue, 29 Mar 2016 09:29:12 +0100</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/creating-better-forms-in-windows-phone-apps/</guid>
      <description>&lt;p&gt;If you are a Windows Phone user you must know that filling in forms in apps is usually a real pain. There is no good way to move from one input to another or to collapse the keyboard. The whole process becomes a struggle, tapping outside the input fields to collapse the keyboard allowing you to scroll to the next input or to the submit button at the top of the screen, usually occluded by the keyboard.&lt;/p&gt;

&lt;p&gt;The typical struggle to get to the last input fields and the submit button may look like this&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/forms1.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;There is no guidance on how to approach this. Take a look at the Store app on Windows 10 mobile, the perfect example of bad UI and UX directly from Microsoft and try review an app. You fill in the title of the review, then struggle to go into the review text input, you have to tap somewhere above the input to hide the keyboard, but not to hit the stars control &amp;hellip; just an UX disaster.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;There is one simple thing you can do to make the experience much better for the user. When the keyboard appears on the screen, take the area of the screen than contains the input and add it a bottom margin corresponding to the height of the keyboard. This will make the whole screen longer and all the inputs and the submit button will be available while scrolling without the need to hide the keyboard.&lt;/p&gt;

&lt;p&gt;The whole experience becomes much better&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/forms2.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;Implementation is also simple.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/250de623e9213bc3bf90.js&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>Using Tooltips to make better menus in Windows apps</title>
      <link>https://blog.davidmacias.com/using-tooltips-to-make-better-menus-in-windows-apps/</link>
      <pubDate>Wed, 23 Mar 2016 09:29:12 +0100</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/using-tooltips-to-make-better-menus-in-windows-apps/</guid>
      <description>&lt;p&gt;If you use Windows apps with navigation menus consisting of icons, you may have noticed that some of those apps show you a text when hovering above those icons. This is a nice touch for the users, allowing them to quickly grasp the meaning of the menu icons without the need to click them or to expand the menu (if available).&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/tooltips.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;Implementing this kind of hovers is really easy thanks to the &lt;code&gt;ToolTipService&lt;/code&gt; that is available in Windows 8.1 and Windows 10 UWP. You can add &lt;code&gt;&amp;lt;ToolTipService.ToolTip&amp;gt;&lt;/code&gt; with any element and include basically any XAML content as the tooltip. Here is a sample from the animation using a simple localized &lt;code&gt;TextBlock&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/c7320d81f9b882bcfd69.js&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>Choosing an image from gallery or camera a bit better in Universal Windows apps</title>
      <link>https://blog.davidmacias.com/choosing-an-image-from-gallery-or-camera-in-uwp/</link>
      <pubDate>Mon, 14 Mar 2016 09:29:12 +0100</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/choosing-an-image-from-gallery-or-camera-in-uwp/</guid>
      <description>&lt;p&gt;When developing Windows Phone apps you may encounter a use case when you have to allow the user to either pick a photo from the photos gallery in the photo or a take a new photo using the phone&amp;rsquo;s camera. One example of this may be the registration process when the user may choose a profile picture.&lt;/p&gt;

&lt;p&gt;In Windows Phone 8.1, this task is quite simple, just use the &lt;code&gt;FileOpenPicker&lt;/code&gt;. It allows you to pick a photo from the gallery or take a new photo. Just take a look at this animation showing how the users takes a new photo using the phone&amp;rsquo;s camera.&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/wpa81.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The code for this is relatively simple, although the &lt;code&gt;AndContinue&lt;/code&gt; pattern can be a pain&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/2885b4a6faa5b0861f17.js?file=pick-wpa81.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;In Windows 10 Mobile, the &lt;code&gt;FileOpenPicker&lt;/code&gt; has been changed to be more customizable. This make the process of  taking a new photo using the phone&amp;rsquo;s camera totally hidden. Not a chance a common user will discover it, just take a look at this animation.&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/uwp.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;So how to make this experience a bit better for the user? My solution is instead of launching the &lt;code&gt;FileOpenPicker&lt;/code&gt; showing a &lt;code&gt;Flyout&lt;/code&gt; with two options; Choose from gallery and Take photo. The Choose from gallery option just launches the &lt;code&gt;FileOpenPicker&lt;/code&gt;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/2885b4a6faa5b0861f17.js?file=pick-uwp.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;and the Take photo option uses CameraCaptureUI to directly take a photo&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/2885b4a6faa5b0861f17.js?file=camera-uwp.cs&#34;&gt;&lt;/script&gt;       

&lt;p&gt;The result might look like this. Do not forget to add an option to delete the photo if one is already chosen.&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/uwp2.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;</description>
    </item>
    
    <item>
      <title>Using Hockey App to distribute Windows Phone apps</title>
      <link>https://blog.davidmacias.com/using-hockey-app-to-distribute-windows-phone-apps/</link>
      <pubDate>Tue, 16 Feb 2016 09:29:12 +0100</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/using-hockey-app-to-distribute-windows-phone-apps/</guid>
      <description>&lt;p&gt;Distributing Windows Phone apps to testers has always been a pain. The Private Beta in the Windows Store intended for this is not very flexible and it got much worse with Windows 10 (generating promotional code that can take up to 24 hours).&lt;/p&gt;

&lt;p&gt;One of the better ways to solve the beta build distribution is using a service like &lt;a href=&#34;http://hockeyapp.net/&#34;&gt;Hockey App&lt;/a&gt;, that Microsoft recently acquired. To be able to use Hockey App (or any other service) you need to &lt;a href=&#34;https://products.websecurity.symantec.com/orders/enrollment/microsoftCert.do&#34;&gt;buy a $299 certificate from Symantec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You then use the certificate to sign the XAP or APPX files of your app. Those signed binaries can be than installed on devices with the correct application enrollment token directly from Hockey App, bypassing the Windows Store.&lt;/p&gt;

&lt;p&gt;One of my clients got persuaded to try this approach after some problem with the Windows Store Private Beta and bough the certificate. It took a week for the purchase to go through and another week to finally get the certificate in the correct PFX format from Symantec.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adding password to the PFX certificate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The PFX certificate file I got had an empty password. This is quite a problem for all the Microsoft tools that work with certificates, especially for XapSignTool. I could not make the tools work with an empty password so I had to change the password first. This is done quite easily using using OpenSSL.&lt;/p&gt;

&lt;div data-gist=&#34;24cb76710fc7d6c9f2cb&#34; data-file=&#34;pwd.bat&#34;&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Generating application enrollment token&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To allow the devices to install the signed XAP (or APPX) you need to generate an application enrollment token that will be installed on the devices. The process is quite simple, just call&lt;/p&gt;

&lt;div data-gist=&#34;24cb76710fc7d6c9f2cb&#34; data-file=&#34;aet.bat&#34;&gt;&lt;/div&gt;

&lt;p&gt;as a result you will get three files: AET.aet, AET.aetx, AET.xml. Get the AET.aetx file and upload it to Hockey App by clicking Add version and drag and dropping the file to the upload dialog. The company profile for your app in Hockey App will get updated using this file. This is done only once.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Signing the binary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Each time you submit a new build to Hockey App, you need to sign the binary (XAP in my case) with the certificate. The &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/apps/dn168929(v=vs.105).aspx&#34;&gt;signing process differs for XAP and APPX files&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For XAP files it is just calling the right PowerShell script with the correct parameters&lt;/p&gt;

&lt;div data-gist=&#34;24cb76710fc7d6c9f2cb&#34; data-file=&#34;sign.bat&#34;&gt;&lt;/div&gt;

&lt;p&gt;and the result is .. an error &lt;code&gt;Signtool Error: This file format cannot be signed because it is not recognized&lt;/code&gt;. So I had to do some research. I found a &lt;a href=&#34;https://stackoverflow.com/questions/20970686/error-signing-windows-phone-xap-file-signtool-error-this-file-format-cannot&#34;&gt;developer describing the same problem on StackOverflow&lt;/a&gt;. The solution was to install &lt;a href=&#34;http://downloads.tomsguide.com/silverlight-microsoft,0301-10659.html&#34;&gt;Silverlight 5.1.30514.0&lt;/a&gt;. This was really strange, it is a Silverlight runtime not an SDK and it does not get installed with Visual Studio or the Windows Phone SDK.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Distributing the app&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you upload a signed binary to Hockey App, your testers can download it using a web browser to their devices. Each device needs to install the company profile (the application enrollment token) once, and then can install the builds you provide.&lt;/p&gt;

&lt;p&gt;Installation of the Windows Phone app builds is a bit strange, no install progress or success messages, the app just appears in the list ofter one or two minutes. But it works, and it is much faster and more flexible than the Private Beta provides by the Windows Store.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Problems getting paid from the Windows Store, again</title>
      <link>https://blog.davidmacias.com/problems-getting-paid-from-the-windows-store-again/</link>
      <pubDate>Tue, 21 Jul 2015 00:00:00 +0000</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/problems-getting-paid-from-the-windows-store-again/</guid>
      <description>&lt;p&gt;I do not make much money on my Windows Phone apps (who does?), but when the payout time comes every couple of months, I expect the money to be delivered. Dealing with Microsoft, I should know better.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Failed payment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last month I looked into the Dev Center and saw that my scheduled payment failed, telling me to contact the support. So I did. The result was one moth of exchanging email without a solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dealing with support&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Microsoft employee told me that I am in a small group of people with this problem. I do not know if I have such a bad look always be in a problematic supposedly small group, or that the group are not that small. He told me that Microsoft will retry the payment. The payment was supposedly retried on June 24th and succeeded. So they say.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Great news, your June payout was returned due to an internal issue; however, the payout of 5264.17 CZK has been re-attempted and was successfully completed on June 24th. If you have not received the payout then please review this transaction with your bank. Please let me know if you have any further questions.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I never got the money. The employee asked me a few times if I got the money and then resigned, telling me that it is my problem and I should check with my bank. Of course I checked with my bank, they do not have the money. If they had, they would transfer it to my account.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Will it happen again?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So the support is not helpful, I think I will never see this money and I can just hope the next payment in a couple of months will be successful. Will it?&lt;/p&gt;

&lt;p&gt;I took a look at my payout settings in the new Dev Center and it is a mess&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/payout.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;It previous pages is telling my that everything is ok and my data is valid, but is it? Those four radios do not give me the confidence to believe it. Especially seeing my old account (x3168) that was there in the Windows Store and I deleted it. I used to get the payment to the x0026 account that was in my Windows Phone Store account.&lt;/p&gt;

&lt;p&gt;Funny thing about this form, I never found out how to delete this old account. If you select it, you can only edit it, no way to delete it. If I select the correct account and click save, nothing changes, the radios all remain unselected. I do now know it is a bug or another great Microsoft UI.&lt;/p&gt;

&lt;p&gt;So I guess maybe the next payment will also get lost somewhere ..&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementing Google login in Universal Apps</title>
      <link>https://blog.davidmacias.com/implementing-google-login-in-universal-apps/</link>
      <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/implementing-google-login-in-universal-apps/</guid>
      <description>&lt;p&gt;In a recent project I had to implement Google login to an Universal App. I decided to use the native &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows.security.authentication.web.webauthenticationbroker.aspx&#34;&gt;WebAuthenticationBroker&lt;/a&gt; control and the implementation was not as straightforward as I hoped. By implementing Google login I mean getting the authentication token that you can then use with your server API.&lt;/p&gt;

&lt;p&gt;WebAuthenticationBroker is a good idea but it is implemented rather poorly. It works differently on Windows 8.1 and Windows Phone 8.1 due to the &amp;#8220;AndContinue&amp;#8221; pattern that Windows Phone 8.1 forces on you. You can solve this with &lt;a href=&#34;http://blog.kulman.sk/why-universal-apps-as-not-as-universal-as-you-may-think/&#34;&gt;some ifdefs and platform specific code, as always&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The real problem s that the &lt;a href=&#34;https://code.msdn.microsoft.com/windowsapps/Web-Authentication-d0485122&#34;&gt;MSDN sample&lt;/a&gt; states it works with Google login but it does not. The sample thinks it gets the authentication token but it does not, it just gets the success code that you have to exchange for the authentication token yourself.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Lets start with a basic config&lt;/p&gt;

&lt;div data-gist=&#34;65a406f7f3cff48be3c5&#34; data-file=&#34;config.cs&#34;&gt;&lt;/div&gt;

&lt;p&gt;The important things here are your Google app id and Google app secret. The GoogleStartUri also contains permissions that you want to get (profile, &lt;a href=&#34;https://www.googleapis.com/auth/plus.login&#34;&gt;https://www.googleapis.com/auth/plus.login&lt;/a&gt; and &lt;a href=&#34;https://www.googleapis.com/auth/plus.me&#34;&gt;https://www.googleapis.com/auth/plus.me&lt;/a&gt; email in my case).&lt;/p&gt;

&lt;p&gt;You use this config with a WebAuthenticationBroker call&lt;/p&gt;

&lt;div data-gist=&#34;65a406f7f3cff48be3c5&#34; data-file=&#34;login.cs&#34;&gt;&lt;/div&gt;

&lt;p&gt;on Windows 8.1 you get the response data immediately. On Windows Phone 8.1, you have to implement the &amp;#8220;AndContinue&amp;#8221; pattern.&lt;/p&gt;

&lt;p&gt;You use the response data to parse out the success code&lt;/p&gt;

&lt;div data-gist=&#34;65a406f7f3cff48be3c5&#34; data-file=&#34;GetGoogleSuccessCode.cs&#34;&gt;&lt;/div&gt;

&lt;p&gt;Now that you have the success code, you can exchange it for the authentication token&lt;/p&gt;

&lt;p&gt;And now you finally have a way to get the authentication token and implement Google login.&lt;/p&gt;

&lt;div data-gist=&#34;65a406f7f3cff48be3c5&#34; data-file=&#34;GetToken.cs&#34;&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>The death of the WinRT developer?</title>
      <link>https://blog.davidmacias.com/the-death-of-the-winrt-developer/</link>
      <pubDate>Thu, 30 Apr 2015 00:00:00 +0000</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/the-death-of-the-winrt-developer/</guid>
      <description>&lt;p&gt;As many other Windows Phone / Windows 8 / Universal apps developers (lets just call us WinRT developers) I watched the Build 2015 keynote last night. And I did not like it. I know Microsoft does not know to communicate but the message for me was clear. We, the WinRT developer, are no longer needed.&lt;/p&gt;

&lt;p&gt;First, Microsoft announced that WPF apps will be allowed to be submitted to the Windows Store to be used on desktops / tablets. So why would anyone want to develop (or want to have developed) a Windows 8 (WinRT) app, when they can just use WPF and get everything done easier? I do not know.&lt;/p&gt;

&lt;p&gt;But allowing WPF apps to the Windows Store is a small news compared to the ability to run Android apps on Windows Phone. The first news talked about porting Android apps to the Windows Phone, but later, &lt;a href=&#34;http://www.zdnet.com/article/heres-how-microsoft-hopes-to-get-android-and-ios-phone-apps-into-its-windows-10-store/&#34;&gt;statements like this&lt;/a&gt; appeared&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Android developers will be able to submit versions of their apps, written in Java or C++, to the Windows Store in he form of APKs and have those apps work on Windows Phone 10 devices. Android developers should be able to start submitting apps to the Windows 10 Store some time in the next few months.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;So let get this straight. Who would want a native mobile Windows app developed, when they can just take their Android app and use it on Windows? What company would want to keep their mobile Windows team, when they can just use their Android team to make Windows apps?&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; width=&#34;550&#34;&gt;
  &lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
    So I can use WPF to get into the store, and Java to get onto WinPhone and Android. So why would I write a universal app???
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;mdash; Morten Nielsen (@dotMorten) &lt;a href=&#34;https://twitter.com/dotMorten/status/593467368124379137&#34;&gt;April 29, 2015&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sure, Android apps will probably not run on XBOX and HoloLens, but I doubt Microsoft will open the XBOX store for all the developers, more likely only chosen companies will be allowed to publish apps. HoloLens will be used only by a small number of people if this price is not really low (which I doubt it will be), so only a few HoloLens apps will be needed.&lt;/p&gt;

&lt;p&gt;For me, the situation seems clear, it is the death of the WinRT developer.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; width=&#34;550&#34;&gt;
  &lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
    Can the last XAML dev to leave please turn out the lights. &lt;a href=&#34;https://twitter.com/hashtag/Build2015?src=hash&#34;&gt;#Build2015&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;mdash; Mark Allan (@MarkXA) &lt;a href=&#34;https://twitter.com/MarkXA/status/593468730794967043&#34;&gt;April 29, 2015&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Player Framework localization</title>
      <link>https://blog.davidmacias.com/player-framework-localization/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/player-framework-localization/</guid>
      <description>&lt;p&gt;In my recent universal (Windows Phone 8.1 and Windows 8.1) project I implemented PlayReady DRM protected smooth streaming movies playback using the &lt;a href=&#34;https://playerframework.codeplex.com/&#34;&gt;Player Framework&lt;/a&gt;. This projects seems to be dead, but it is still the best option when implementing any kind of video playback.&lt;/p&gt;

&lt;p&gt;One of the first things I had to do was localize it&amp;#8217;s controls, because the app I worked on was in Czech and Slovak, not in English (the only language the Player Framework supports out of the box). Not all the texts an be localized, but the most visible ones like button labels and error messages can.&lt;/p&gt;

&lt;p&gt;To create your own localization, I suggest you create a new RESW file in your project. You can use and existing one, but I prefer to separate the texts for the Player Framework from texts for the rest of the app.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Next you have to find out the keys for the string you want to localize. You an &lt;a href=&#34;https://playerframework.codeplex.com/SourceControl/latest#Win8.Xaml.Localize.Win81/en-US/PlayerFramework.resw&#34;&gt;find them in the source code&lt;/a&gt;. You can just copy the content of that RESW file to yours RESW file and localized everything.&lt;/p&gt;

&lt;p&gt;The last step is to let the PlayerFramework know about your RESW file using&lt;/p&gt;

&lt;div data-gist=&#34;a5dcc1537cb977d023b4&#34;&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Leveraging ETag caching in Windows Phone and Windows apps</title>
      <link>https://blog.davidmacias.com/leveraging-etag-caching-in-windows-phone-and-windows-apps/</link>
      <pubDate>Mon, 20 Apr 2015 00:00:00 +0000</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/leveraging-etag-caching-in-windows-phone-and-windows-apps/</guid>
      <description>&lt;p&gt;In my previous article I showed you &lt;a href=&#34;http://blog.kulman.sk/using-etag-to-cache-responses-in-nancyfx/&#34; title=&#34;Using ETag to cache responses in NancyFX&#34;&gt;how to implements server side caching using ETag&lt;/a&gt;. HTTP clients on other platforms can usually work with ETag automatically, but of course, the portable HTTP client used on Windows platforms cannot. You have to implement ETag handling yourself.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;http://blog.kulman.sk/tvtime-track-your-favorite-tv-shows-on-windows-phone/&#34; title=&#34;TvTime: track your favorite TV shows on Windows Phone&#34;&gt;TvTime&lt;/a&gt;, all the server requests are GET request, so I remember the ETag values for each Url (= each GET request). I store the ETag values in application local settings.&lt;/p&gt;

&lt;p&gt;When the app wants to get some data, I perform a GET request including the ETag as the If-None-Match header. If my ETag matches with the ETag on the server, the server returns HTTP 304 Not Modified and I return the cached data from disk. Otherwise I read the response body and return it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div data-gist=&#34;55fa534bdcb4ab963253&#34;&gt;&lt;/div&gt;

&lt;p&gt;This approach works with the portable Http client library, that you can use with Windows Phone 8 (Silverlight), 8.1 (Sliverlight), 8.1 XAML and Windows &lt;sup&gt;8&lt;/sup&gt;&amp;frasl;&lt;sub&gt;8&lt;/sub&gt;.1. If you only need to support Windows Phone 8.1 XAML and Windows 8.1, you may want to look into the Windows.Web.Http.HttpClient.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Back navigation on Backspace key press in Windows 8.1 apps</title>
      <link>https://blog.davidmacias.com/back-navigation-on-backspace-key-press-in-windows-8-1-apps/</link>
      <pubDate>Tue, 03 Mar 2015 00:00:00 +0000</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/back-navigation-on-backspace-key-press-in-windows-8-1-apps/</guid>
      <description>&lt;p&gt;I am not a mouse or a touch person, I like using the keyboard and keyboard shortcuts for everything. So when I (have to) use a Windows 8.1 Metro app, I always miss when the app does not navigate back when I press the Backspace key, just like the browser does.&lt;/p&gt;

&lt;p&gt;Implementing this functionality is really simple, you just need to handle the KeyUp event and listen for the Backspace key. You can implement the KeyUp event handler on every View in your app, but that is not necessary. You can just hook up the global Window.Current.CoreWindow.KeyUp event after you app starts.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div data-gist=&#34;b0f41a1a25acad0d17a4&#34;&gt;&lt;/div&gt;

&lt;p&gt;If you implement this in your app, I am sure you will make some of your users more happy.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dialog helper for Universal Apps the easy way</title>
      <link>https://blog.davidmacias.com/dialog-helper-for-universal-apps/</link>
      <pubDate>Wed, 24 Dec 2014 00:00:00 +0000</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/dialog-helper-for-universal-apps/</guid>
      <description>&lt;p&gt;Today I read Joost van Schaik&amp;#8217;s blog post called &lt;a href=&#34;http://dotnetbyexample.blogspot.nl/2014/12/a-behavior-to-show-messagedialog-from.html&#34;&gt;A behavior to show a MessageDialog from a MVVMLight viewmodel in Universal apps–with callbacks&lt;/a&gt;. I am not a MVVMLight guy (I use Caliburn.Micro) and I personally use an approach that uses a little less code, employing a helper class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Helper class&lt;/strong&gt;&lt;/p&gt;

&lt;div data-gist=&#34;fda1860b35d5312e9157&#34; data-file=&#34;DialogHelper.cs&#34;&gt;&lt;/div&gt;

&lt;p&gt;with a simple usage in ViewModel&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div data-gist=&#34;fda1860b35d5312e9157&#34; data-file=&#34;usage.cs&#34;&gt;&lt;/div&gt;

&lt;p&gt;and in the View (making use of Caliburn.Micro mapping the AppBarButton with x:Name=&amp;#8221;Message&amp;#8221; to the Message method in the ViewModel&lt;/p&gt;

&lt;div data-gist=&#34;fda1860b35d5312e9157&#34; data-file=&#34;usage.xaml&#34;&gt;&lt;/div&gt;

&lt;p&gt;If you want to show a dialog with just the Ok button, set cancelText to null and do not process the helper method&amp;#8217;s result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simple service&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you do not like static classes, just make it service&lt;/p&gt;

&lt;div data-gist=&#34;fda1860b35d5312e9157&#34; data-file=&#34;DialogHelperService.cs&#34;&gt;&lt;/div&gt;

&lt;p&gt;the usage in the ViewModel will change just slightly&lt;/p&gt;

&lt;div data-gist=&#34;fda1860b35d5312e9157&#34; data-file=&#34;usage2.cs&#34;&gt;&lt;/div&gt;

&lt;p&gt;and you can easily mock the service and test the ViewModel.&lt;/p&gt;

&lt;p&gt;You can find the complete code in a sample solution on GitHub: &lt;a href=&#34;https://github.com/igorkulman/SampleMessagePopup&#34;&gt;https://github.com/igorkulman/SampleMessagePopup&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating a fake splashscreen for your Universal App</title>
      <link>https://blog.davidmacias.com/creating-a-fake-splashscreen-for-your-universal-app/</link>
      <pubDate>Tue, 23 Dec 2014 00:00:00 +0000</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/creating-a-fake-splashscreen-for-your-universal-app/</guid>
      <description>&lt;p&gt;Sometimes you may want your app to display the startup splashscreen a bit longer, so you can initialize or fetch some data necessary for the app to run. To achieve this, you can create a fake splaschreen, a View that looks just like the splashscreen, does all the work and redirects to the real main View afterwards.&lt;/p&gt;

&lt;p&gt;In theory, it is quite simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a SplashScreenView with just the right background and the splashscreen image&lt;/li&gt;
&lt;li&gt;Set the app to display SplashScreenView at startup&lt;/li&gt;
&lt;li&gt;Do all the initializing and data fetching in SplashScreenViewModel and redirect to there real MainView&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This works quite well with Windows 8.1, but on Windows Phone 8.1 there is a problem. When you run the Windows Phone 8.1 app, you will see a page transition happen between the real splashscreen and your SplashScreenView. This looks strange, so it is better to get rid of it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Managing the Frame transitions on Windows Phone 8.1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To fix this issue, you can disable the transitions on the frame and add them manually to each View other than SplashScreenView, but there is a better way. You can disable the transitions when creating the frame and the enable them after navigating from the SplashScreenView. Do not forget the &lt;a href=&#34;http://blog.kulman.sk/why-universal-apps-as-not-as-universal-as-you-may-think/&#34; title=&#34;Why Universal Apps as not as universal as you may think&#34;&gt;#ifdefs, because it is one of those many things that are Windows Phone specific in the Universal Apps&lt;/a&gt;.&lt;/p&gt;

&lt;div data-gist=&#34;d61c0a71e8ed0e2fbc1d&#34;&gt;&lt;/div&gt;

&lt;p&gt;This makes the illusion of the fake splashscreen perfect, but I would recommend adding a ProgressBar or ProgressRing to the SplashScreenView so the users do not have the feeling that your app froze.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why Universal Apps as not as universal as you may think</title>
      <link>https://blog.davidmacias.com/why-universal-apps-as-not-as-universal-as-you-may-think/</link>
      <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/why-universal-apps-as-not-as-universal-as-you-may-think/</guid>
      <description>&lt;p&gt;I have been developing Windows Phone apps for a few years now, always sticking to Silverlight and keeping using Silverlight also after Microsoft announced the WinRT flavor of Windows Phone apps and the so called Universal Apps. The Windows Phone 8.0 and 8.1 Silverlight APIs have some limitations, but are now well known do not contain many bugs. They are the safe choice if you want to create a Windows Phone apps. And do not forget that there are still many device running Windows Phone 8 (like Verizon customers in the US) that never got the 8.1 updated promised to everyone during the summer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Really universal?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Windows Phone 8.1 XAML and Universal Apps included WinRT APIs that have many problems, including some that there is no solution for. I used the WinRT APIs when creating first Windows 8 apps about 2 years ago, so I am not new to the APIs. I have not touched the WinRT APIs again until recently, because there was no demand for Windows 8 or Windows 8.1 apps. Why would it? People use Windows 8 or 8.1 but do not care about Metro apps, they give them no value compared to &amp;#8220;normal&amp;#8221; Win32 and Windows tablets are practically non-exists (expect for the Surface tablets owned by few programmers and maybe no one else).&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Universal Apps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recently, a client was thinking about adding a Windows Phone app for their service the its existing Android and iOS apps, but they did not think it was worth the money. So the local Microsoft branch told them they would pay for the app (seems like many of the app here are created this way) under two conditions. The app had to be a Universal App and had to be finished before the years end. The client agreed and I had to create a Universal App. And the problems started.&lt;/p&gt;

&lt;p&gt;In theory, Universal Apps are supposed to make code sharing between Windows Phone and Windows 8.1 simple and allow you to reuse as much code as possible. This works on the trivial Microsoft samples, but try to create a real world app. I have a business logic project with API calls, storage, etc. in a portable class library (like I always did before Universal Apps existed) and I created an Universal App from the template. And the #ifdef hell started.&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/56995992.jpg&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;&lt;strong&gt;#ifdefs everywhere&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With Universal Apps you can safely share the ViewModels (I am using Caliburn.Micro) .. and that is about it. You have to create separate Views (because on phone and desktop information is typically displayed different), but the worst parts are the #ifdefs.&lt;/p&gt;

&lt;p&gt;You need to set some properties of the main Frame, you have to use #ifdefs because the frame is a bit different on phone and desktop (like animations). You want to reuse as much DataTemplates as possible, so add another #ifdef for adding the right resource dictionary or many #ifdefs in the data templates to tune them, because it does not matter you use GridView on phone and GridView on desktop, they behave a bit differently in some cases.&lt;/p&gt;

&lt;p&gt;Then you need to add audio playback to your app. There is a background audio playback API for Windows Phone 8.1 and none for Windows 8.1 In Windows 8.1 you need a global MediaElement in your Frame and handling everything differently. So add another big #ifdef. And by the way, the background audio playback API for Windows Phone 8.1 really sucks compared to the old Silverlight APIs. Just try downloading the &lt;a href=&#34;https://code.msdn.microsoft.com/windowsapps/BackgroundAudio-63bbc319&#34;&gt;sample form MSDN&lt;/a&gt; and hitting Suspend and Resume in Visual Studio, the background agent crashes horribly, without any exception and takes your Visual Studio instance to hell with it. And of course, the background audio playback API does not work on some phones. &lt;a href=&#34;https://stackoverflow.com/questions/26175599/windows-phone-8-1-rt-backgroundmediaplayer-not-working&#34;&gt;Just does not work&lt;/a&gt;. I confirmed this finding with other developers. Another messed up API that used to work before the whole Universal Apps hype. And explain this to the client who sees that things like this work on iOS, work on Android, hell, they even for on Windows Phone 8.0 (Slivelight) apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;More messed up APIs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So background audio playback API for Windows Phone 8.1 is messed up, anything else? Sure. BackgroundDownloader is another example. In Silverlight, there was a BackgroundDownloader that was quite limited, but it worked. In Universal Apps, there is a new BackgroundDownloader with some new features, and some essential ones missing. For example, in Silverlight, each download could have a Tag, where you can store any data so you know something about the download when it finishes (to what business entity it belongs, etc.). Not any more in Universal Apps. There is no Tag, so you have to build and manage you own kind of index for all the downloads, so you can actually match them to your business entities. An annoyance, but nothing you cannot manage, right.&lt;/p&gt;

&lt;p&gt;The BackgroundDownloader in Universal Apps has a bigger problem. It sometimes crashes so horribly, that it reboots the whole device! No exception, no logs, just a reboot. The maximum limit for the BackgroundDownloader is 1000 downloads, but try adding say 300 to the queue, cancelling them after a few minutes (does not seem to matter if you use one cancellation token or give each download its own) and there is a good chance the phone or the emulator will reboot itself. Not always, but quite often. Again, try explaining this issue to the client.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Silverlight, I commonly used the LongListSelector to display data, using it with a WrapPanel when I needed to create a two column layout. The LongListSelector is gone, in Universal Apps you have to use GridView also on Windows Phone. Or you can use the ListView with a custom wrap panel you write yourself or download somewhere, but it takes some effort to make it do virtualization properly.&lt;/p&gt;

&lt;p&gt;So you use GridView on both Windows Phone 8.1 and Windows 8.1 to make it consistent. Add tens f of items with images to it and the performance starts to really suffer. Gray placeholders will show up and more importantly, &lt;a href=&#34;https://stackoverflow.com/questions/27488201/gridview-and-placeholders-that-never-disapper-in-windows-8-and-windows-phone-app&#34;&gt;never disappears&lt;/a&gt;. You do not event need images, just add about 300 text only items to the GridView and the gray placeholders will starts to show when scrolling.&lt;/p&gt;

&lt;p&gt;Need another proof that the WinRT controls are slower? Just &lt;a href=&#34;https://www.youtube.com/watch?v=nn5hVq6Q-zo&#34;&gt;take a look at this video comparing the media app on and old Windows Phone 7 to the media app on a much more powerful device running Windows Phone 8.1&lt;/a&gt;. You can see that the old, single core device runs the Silverlight apps faster than the new powerful phone runs the new WinRT equivalent of the app.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>REST service base class for Windows Phone 8.1 XAML apps</title>
      <link>https://blog.davidmacias.com/rest-service-base-class-for-windows-phone-8-1-xaml-apps/</link>
      <pubDate>Mon, 24 Nov 2014 00:00:00 +0000</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/rest-service-base-class-for-windows-phone-8-1-xaml-apps/</guid>
      <description>&lt;p&gt;Communicating with a JSON based REST service is a task that many Windows Phone apps have to do. My apps sure do it a lot so I came up with a base class that I use in all of them, &lt;a href=&#34;https://github.com/igorkulman/Kulman.WPA81.BaseRestService&#34;&gt;put it on Github&lt;/a&gt; and &lt;a href=&#34;https://www.nuget.org/packages/Kulman.WPA81.BaseRestService/&#34;&gt;created a Nuget package&lt;/a&gt;, so your apps could use it to.&lt;/p&gt;

&lt;p&gt;The usage of this base class is simple. Create your service class and inherit from BaseRestService. The minimum you need to do to make it work is to override the GetBaseUrl() method to set the base url for all the requests. You can (but do not have to) also override the GetRequestHeaders() method to set the default request headers.&lt;/p&gt;

&lt;div data-gist=&#34;405732bf92858dba1c3c&#34; data-file=&#34;usage1.cs&#34;&gt;&lt;/div&gt;

&lt;p&gt;and you can now use the following protected methods&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div data-gist=&#34;405732bf92858dba1c3c&#34; data-file=&#34;methods.cs&#34;&gt;&lt;/div&gt;

&lt;p&gt;All the JSON serialization and deserialization is automatically done for you. If you need to execute some action before every request (like checking if the OAuth token expired and refreshing it), simply override the OnBeforeRequest() method.&lt;/p&gt;

&lt;p&gt;Methods in your service may then look like this&lt;/p&gt;

&lt;div data-gist=&#34;405732bf92858dba1c3c&#34; data-file=&#34;usage2.cs&#34;&gt;&lt;/div&gt;

&lt;p&gt;In case of an error, the methods throw either a DeserialziationException with the original data if deserialization failed, or a ConnectionException with the HTTP status code.&lt;/p&gt;

&lt;p&gt;if you need some additional features, just raise an issue in the &lt;a href=&#34;https://github.com/igorkulman/Kulman.WPA81.BaseRestService&#34;&gt;Github repo&lt;/a&gt;, or create a pull request.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>