<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows Phone on Igor Kulman</title>
    <link>https://blog.davidmacias.com/categories/windows-phone/</link>
    <description>Recent content in Windows Phone on Igor Kulman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>igor@kulman.sk (davidmacias)</managingEditor>
    <webMaster>igor@kulman.sk (davidmacias)</webMaster>
    <lastBuildDate>Tue, 28 Feb 2017 09:29:12 +0100</lastBuildDate>
    <atom:link href="/categories/windows-phone/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Creating a TV schedule grid in UWP</title>
      <link>https://blog.davidmacias.com/creating-a-tv-schedule-grid-in-uwp/</link>
      <pubDate>Tue, 28 Feb 2017 09:29:12 +0100</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/creating-a-tv-schedule-grid-in-uwp/</guid>
      <description>&lt;p&gt;I am currently working on a UWP app for a cable TV company. The app allows their clients to watch the TV channels they are subscribed to with additional information like the TV schedule, information about TV shows, recording TV shows for watching later, etc. One of the main functionalities of the app is a TV schedule grid. Creating this TV schedule grid in UWP is not so easy, especially because of the poor XAML rendering performance.&lt;/p&gt;

&lt;h2 id=&#34;tv-schedule-grid&#34;&gt;TV schedule grid&lt;/h2&gt;

&lt;p&gt;The TV schedule grid shows a TV schedule for all the subscribed channels for a given day. The channels are being shown in rows and the columns represent TV shows. The grid is scrollable in both directions and the channel logos are sticky. The users can be subscribed up 70 channels and all of this should work reasonably well even on a Windows Phone.&lt;/p&gt;

&lt;p&gt;This is how the result looks in a Windows Phone emulator. Spoiler: there is just no way to make it so smooth on a real Windows Phone device.&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/tvgrid.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;xaml-controls&#34;&gt;XAML controls&lt;/h2&gt;

&lt;p&gt;My first and obvious approach to implement the TV schedule grid was to use native XAML controls. The &lt;code&gt;ScrollViewer&lt;/code&gt; control got a handy &lt;code&gt;LeftHeader&lt;/code&gt; property in UWP making implementing the sticky channels logos easy. The problem with &lt;code&gt;ScrollViewer&lt;/code&gt; is it does not support virtualization. If you create something like a huge &lt;code&gt;Grid&lt;/code&gt; with all the data and put into the &lt;code&gt;ScrollViewer&lt;/code&gt; the app will crash because of memory constrains.&lt;/p&gt;

&lt;p&gt;You can create a &lt;code&gt;ListView&lt;/code&gt; or &lt;code&gt;GridView&lt;/code&gt; and use it to display rows and put another one into each row to show columns. You will gain virtualization that works, your app will not crash because of memory but the scrolling performance will be abysmal. The users will notice the virtualization manifesting itself as appearing and disappearing rows and columns resulting in very poor user experience. When you have a vertical &lt;code&gt;ListView&lt;/code&gt; where each row represents a TV channel containing another horizontal &lt;code&gt;ListView&lt;/code&gt; with the TV shows, then you have to face another hard problem. When the user scrolls horizontally in a row, you need all the other rows to scroll to the same horizontal position so the TV schedule stays in sync. Try syncing horizontal &lt;code&gt;ListViews&lt;/code&gt; in a virtualized vertical &lt;code&gt;ListView&lt;/code&gt;, I dare you.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; When I was trying out this solution I tried phasing as suggested by Tim Heuer in the comments. Instead of seeing empty gaps in the TV schedule when scrolling, as the result of virtualization, I sometimes saw TV show borders instead. It was better but still not good enough, the perceived performance did not improve much. And there was still the hard problem of syncing the horizontal &lt;code&gt;ListViews&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My last idea was to put a big &lt;code&gt;Canvas&lt;/code&gt; into the &lt;code&gt;ScrollViewer&lt;/code&gt; and render only what is currently in view. This is the way the Radaee PDF I use in another project does PDF rendering. You can add XAML controls to the &lt;code&gt;Canvas&lt;/code&gt;, remove them when they are not in view anymore. This is quite laborious and the resulting performance is still not very good.&lt;/p&gt;

&lt;p&gt;You can also use the &lt;code&gt;Canvas&lt;/code&gt; as a canvas and draw primitives instead of using XAML controls. It is not very comfortable, it is quite low level stuff. Thinking about using such a low level solution made me think of Win2D.&lt;/p&gt;

&lt;h2 id=&#34;win2d&#34;&gt;Win2D&lt;/h2&gt;

&lt;p&gt;Win2D is an easy-to-use Windows Runtime API for immediate mode 2D graphics rendering with GPU acceleration. It is available to C# and C++ developers writing Windows apps for Windows 8.1, Windows Phone 8.1 and Windows 10. It utilizes the power of Direct2D, and integrates seamlessly with XAML and CoreWindow. I have some experience with Win2D, I &lt;a href=&#34;https://blog.davidmacias.com/creating-a-simple-windows-10-game-with-win2d&#34;&gt;used it when creating my retro Sokoban game&lt;/a&gt;. So I gave it a try.&lt;/p&gt;

&lt;p&gt;Win2D is a really low level API. This means I had to do a lot of math to compute what is currently in view and where to render it. Rendering TV shows is also not easy, you have to render the cell using rectangles, lines, etc. At least Win2D makes drawing texts relatively easy.&lt;/p&gt;

&lt;p&gt;The next thing to solve was scrolling the Win2D canvas. Capturing gestures and mouse movements on a XAML control is not easy, so I came up with another solution. I put a transparent &lt;code&gt;ScrollViewer&lt;/code&gt; over the Win2D grid making the Win2D canvas redraw when the &lt;code&gt;ViewChanged&lt;/code&gt; event fires. The math in the rendering logic takes the &lt;code&gt;ScrollViewer&lt;/code&gt; scroll positions into account to correctly determine what is currently in view.&lt;/p&gt;

&lt;h3 id=&#34;performance-tuning&#34;&gt;Performance tuning&lt;/h3&gt;

&lt;p&gt;After a lot of work this solution worked, rendered what I wanted it to. The performance seemed good in a Windows Phone emulator but when I tried it on a real phone I was disappointed. The performance was still quite bad. I found out rendering the texts is the slowest part, so the idea was to cache the texts or even better the whole cells by TV show.&lt;/p&gt;

&lt;p&gt;Win2D supports &lt;a href=&#34;https://microsoft.github.io/Win2D/html/Offscreen.htm&#34;&gt;offscreen drawing&lt;/a&gt;. This means you can render something into a texture and the use the texture instead of drawing it again, making it ideal as a form of caching. When rendering the cell of a TV show for the first time, I do not render it directly to the Win2D canvas but instead into a texture. I then add the rendered texture into a in-memory dictionary and draw it to the Win2D canvas. When I need to render the TV show cell again (when the users scrolls the TV schedule grid and the TV show is in view) I just render the texture again. This means you render each show with its multiple texts just once.&lt;/p&gt;

&lt;p&gt;Solving cache invalidation is quite easy in this case, the texture becomes invalid only when the TV show it represents becomes active (meaning it is currently being broadcasted on a given channel making it gray) or inactive (black). Of course you cannot cache everything, only a certain number of textures, but it is easily solved by setting a limit on the number of cached textures.&lt;/p&gt;

&lt;p&gt;With this performance improvement the TV schedule grid became quite tolerable on a Lumia 950, but still slow on a Lumia 750. Sadly, there was nothing else I could do about it. I asked about it on Twitter and found another developer who implemented a TV schedule grid in his app. He also used Win2D but just omitted it from the phone version, because of performance.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Creating something like a TV schedule grid in UWP with good performance is simply impossible using XAML controls. You can use Win2D to gain some performance but the result is still not exactly great on Windows Phones.&lt;/p&gt;

&lt;p&gt;Even Microsoft XAML apps suffer from poor rendering performance. Just take a look at the list in the Add or remove programs section of Windows 10 settings. This is how it behaves on ma quad-core i5, 16 GB RAM and GTX 660.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;When clients tell you your &lt;a href=&#34;https://twitter.com/hashtag/uwp?src=hash&#34;&gt;#uwp&lt;/a&gt; app is slow and lists lag, just show them how Microsoft does it in &lt;a href=&#34;https://twitter.com/hashtag/Windows10?src=hash&#34;&gt;#Windows10&lt;/a&gt;. Nothing better you can do. &lt;a href=&#34;https://t.co/rnDWLFEHeb&#34;&gt;pic.twitter.com/rnDWLFEHeb&lt;/a&gt;&lt;/p&gt;&amp;mdash; Igor Kulman (@igorkulman) &lt;a href=&#34;https://twitter.com/igorkulman/status/818938357275328514&#34;&gt;January 10, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;If Microsoft cannot create a well-performing lists in XAML and UWP, you as a developer cannot do much better no matter how hard you try.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>My (negative) experience with the Microsoft MVP awards</title>
      <link>https://blog.davidmacias.com/my-experience-with-the-mvp-awards/</link>
      <pubDate>Thu, 05 Jan 2017 09:29:12 +0100</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/my-experience-with-the-mvp-awards/</guid>
      <description>&lt;p&gt;Getting a MVP is a big thing when you are a developer working with the Microsoft stack. It is supposed to be some kind of approval a sign that you are doing something well. I applied for the MVP award back in 2012 and then got nominated in 2016. I want to tell you about both cases because they really made me think that the whole MVP concept is just wrong.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; First, this post is not a hate post because I did not get an MVP award. I do not really care about it. I just want you to know how it works and what is it like. Second, I am in no way generalizing and saying the MVP awards work like this in every region. This is my experience with the Czech Microsoft branch (2012) and later with the CEE, Russia &amp;amp; CIS (2016). I suspect things may work differently in different regions and with different Microsoft branches.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;applying-in-2012&#34;&gt;Applying in 2012&lt;/h2&gt;

&lt;p&gt;In 2012 I started working as a full-time Windows Phone developer in Prague, Czech Republic. I created a few good apps, wrote some programming blog posts, kicked off my StackOverflow answering, did a few user group talks and even taught the Windows Phone development part of a mobile development course on a Czech university. It seemed like I had everything needed to get an MVP award.&lt;/p&gt;

&lt;p&gt;I applied and got a big Excel sheet to fill in. Everything was numbers based. They did not really care what apps you created and how good or big they were, just their count. The same with everything else. It looked like writing 2 trivial blog posts would count for more than teaching 1 university course. But I tried, I thought I did enough. I wrote every single blog post, every single app, everything to this Excel sheet and sent it.&lt;/p&gt;

&lt;p&gt;I did not get the MVP award so I was curious why. A friend close to the local Microsoft branch told me I failed the &amp;ldquo;attitude test&amp;rdquo;. I am a blunt person, I often criticize stuff when it does not work. I wrote some blog posts about problems with Windows Phone and the then just emerging WinRT and how to solve them and I was vocal about it at Twitter. The local Microsoft branch did not like it. One does not get an MVP award here when being critical to Microsoft products.&lt;/p&gt;

&lt;p&gt;So I let it go, turning into a fanboy was not an option for me and I was already on a blacklist because of a blunt talk about the then just starting Windows Store at a local Microsoft conference. Or maybe for acknowledging that Microsoft directly financed some Windows Phone apps, because otherwise they would never be developed. I do not remember.&lt;/p&gt;

&lt;h2 id=&#34;getting-nominated-in-2016&#34;&gt;Getting nominated in 2016&lt;/h2&gt;

&lt;p&gt;A few years passed and an MVP friend, when bored at his job, decided to nominate me for an MVP for fun. He wanted to know if I am still on the blacklist. The idea was that maybe the blacklist was not shared from the local Microsoft branch to CEE, Russia &amp;amp; CIS that handles the MVPs for the whole region now.&lt;/p&gt;

&lt;p&gt;My nomination got accepted, telling him that my GitHub profile looked impressive. I got a form to fill. It was not an Excel sheet this time but an online form that showed in Russian, broke when using translation in Chrome and only worked when I changed the ru-RU in the url to en-US.&lt;/p&gt;

&lt;p&gt;The idea of the form was the same. Numbers, numbers, just some numbers. So I filled it in, focusing on my apps, blog posts, StackOverflow answers, GitHub repos and a conference talk. A day later I got a mass email sent to all the MVP nominees telling me about a call about filling in the form the next day. Kind of a short notice and I already filled in the form.&lt;/p&gt;

&lt;p&gt;I asked if the call was mandatory, the response was that it was not. By my local MVP friend told me I should attend, that they say it is not mandatory but check who is on the call and who is not.&lt;/p&gt;

&lt;p&gt;I joined the call and listened in. Took me about 20 minutes to leave it. It was everything I remember hating about the program, telling the nominees to focus on numbers, fill in as much stuff as they could no matter the quality, etc. Those people from CEE, Russia &amp;amp; CIS were a bit delusional for my taste, especially with emails starting with stuff like &amp;ldquo;Thank you again for your interest to our amazing MVP Award Program!&amp;rdquo;. They did not ask for anything after the call or contact me in any way.&lt;/p&gt;

&lt;p&gt;As expected, I did not get the MVP. I was curious so I checked who got the MVP for the same category and the same country. I found the name and wanted to check who he was and what he did. It was hard because he had basically no online presence (no web or blog or Github or StackOverflow) other than a Twitter with no original content just retweeting stuff praising Microsoft. I do not know who he could have put into the numbers oriented form. Then I wrote an email to the CEE, Russia &amp;amp; CIS telling them I am curious how the awarding works, what was the reason for people not getting MVP etc. I never heard back.&lt;/p&gt;

&lt;p&gt;Seems to me that nothing has changed about the MVP awards in my region and probably never will. This is definitely not something I want to take part in anymore.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating a simple Windows 10 game with Win2D</title>
      <link>https://blog.davidmacias.com/creating-a-simple-windows-10-game-with-win2d/</link>
      <pubDate>Wed, 15 Jun 2016 09:29:12 +0100</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/creating-a-simple-windows-10-game-with-win2d/</guid>
      <description>&lt;p&gt;Some time ago while looking at some pixel art work I got an idea to create a retro pixel art game for Windows 10. The choice was obvious, &lt;a href=&#34;https://www.microsoft.com/store/apps/9nblggh4xdln&#34;&gt;Sokoban&lt;/a&gt;. I have a very special relationship with the Sokoban game. The Delpi version of Sokoban was the first game I ever created. I later ported it to all the platforms I played with, namely J2ME (for my Siemens S60 phone), Linux (using Kylix which was basically a Delphi for Linux), Windows Phone 7 and now &lt;a href=&#34;https://www.microsoft.com/store/apps/9nblggh4xdln&#34;&gt;Sokoban Pixel&lt;/a&gt; for the Universal Windows Platform.&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/sokoban-gameplay.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Win2D&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I did not want to learn &lt;a href=&#34;https://unity3d.com/&#34;&gt;Unity&lt;/a&gt; and I considered it quite a overkill for such a simple game. &lt;a href=&#34;http://www.monogame.net/&#34;&gt;Monogame&lt;/a&gt; seemed like an obvious choice, because my Sokoban for Windows Phone 7 was written in XNA. But Monogame requires too much ceremony to install and set up so I was not very eager to use it. I found &lt;a href=&#34;https://github.com/Microsoft/Win2D&#34;&gt;Win2D&lt;/a&gt;. Win2D is an easy-to-use Windows Runtime API for immediate mode 2D graphics rendering with GPU acceleration. It is available to C# and C++ developers writing Windows apps for Windows 8.1, Windows Phone 8.1 and Windows 10. It utilizes the power of Direct2D, and integrates seamlessly with XAML and CoreWindow. This means you can create a normal XAML application, create all your non-gameplay screens in XAML and use Win2D just for the actual gameplay.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initial setup and loading resources&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To get started with Win2D just install the &lt;code&gt;Win2D.uwp&lt;/code&gt; Nuget package and add a &lt;code&gt;CanvasControl&lt;/code&gt; to your app. That&amp;rsquo;s it, no more setup required.&lt;/p&gt;

&lt;p&gt;Before drawing any resources you need to first load them. This should be done in the &lt;code&gt;CreateResources&lt;/code&gt; event of the &lt;code&gt;CanvasControl&lt;/code&gt;. This method should not be async so if you need to load your resources asynchronously (as you always do) you need to use a trick with a separate method&lt;/p&gt;

&lt;div data-gist=&#34;39f73f5117a02c94fbe3b85ec57bb8a8&#34; data-file=&#34;load.cs&#34;&gt;&lt;/div&gt;

&lt;p&gt;The code snippet also shows how to load a simple image as a resources. You probably will not need to load anything other that images in a simple game.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drawing the game&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To make the &lt;code&gt;CanvasControl&lt;/code&gt; draw your game you need to hook up the &lt;code&gt;Draw&lt;/code&gt; event and put all you rendering logic there. There are basically just two things you will want to render, text and images&lt;/p&gt;

&lt;div data-gist=&#34;39f73f5117a02c94fbe3b85ec57bb8a8&#34; data-file=&#34;draw.cs&#34;&gt;&lt;/div&gt;

&lt;p&gt;Both methods have many overloads so it is up to you to choose the one that suits you best. There are also other methods for drawing primitives like likes or circles, take a look at the &lt;a href=&#34;http://microsoft.github.io/Win2D/html/Introduction.htm&#34;&gt;documentation&lt;/a&gt;. When creating a pixel art game, make use you use the &lt;code&gt;CanvasImageInterpolation.NearestNeighbor&lt;/code&gt; otherwise your images will look blurred if not on sufficient resolution.&lt;/p&gt;

&lt;p&gt;Depending on the type of your game, you may need to refresh the game canvas periodically or just as a reaction to the user input. In both cases, just call &lt;code&gt;Invalidate()&lt;/code&gt; on your &lt;code&gt;CanvasControl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Handling user input&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to make you game great on Windows 10, you need to handle a few different input methods because Windows 10 runs on a variety of different devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Keyboard and controller&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First you should handle input from the keyboard, so the game is comfortably playable on a notebook or desktop PC. To do this, you can just subscribe to the &lt;code&gt;KeyUp&lt;/code&gt; method of the current page or to the global &lt;code&gt;Window.Current.CoreWindow.KeyUp&lt;/code&gt; event. Both events give you a &lt;code&gt;VirtualKey&lt;/code&gt; that the user pressed and you just decide what to do.&lt;/p&gt;

&lt;p&gt;If you want to make your game playable on the XBox One or on the PC with a XBox One controller, you should handle the controller input. Handling the controller input is the same as handling the keyboard, you just check for different keys. The resulting code may look like this.&lt;/p&gt;

&lt;div data-gist=&#34;39f73f5117a02c94fbe3b85ec57bb8a8&#34; data-file=&#34;input.cs&#34;&gt;&lt;/div&gt;

&lt;p&gt;If you want to make your game run on XBox One and do not have an XBox One to test it, just get the XBox One controller, connect it to your PC with an USB cable and make sure the whole game is controllable and playable just with it, without the keyboard or mouse.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Touch devices&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Making your game playable on a phone or on a tablet is a bit tricky. There are no input devices usually attached, so you have to come up with your own. There are many ways to handle this. You can recognizes swipes on the device, or make the user tilt the device. But the solution I like the best is to render a simple d-pad in the right corner of the screen. This way the user can hold the device in both hands and use the right thumb to play the game.&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/sokoban-dpad.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When building a simple 2D game for Windows 10, making it a UWP app and use Win2D. The Win2D framework is easy to work with and embed into UWP apps.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating better forms in Windows Phone apps</title>
      <link>https://blog.davidmacias.com/creating-better-forms-in-windows-phone-apps/</link>
      <pubDate>Tue, 29 Mar 2016 09:29:12 +0100</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/creating-better-forms-in-windows-phone-apps/</guid>
      <description>&lt;p&gt;If you are a Windows Phone user you must know that filling in forms in apps is usually a real pain. There is no good way to move from one input to another or to collapse the keyboard. The whole process becomes a struggle, tapping outside the input fields to collapse the keyboard allowing you to scroll to the next input or to the submit button at the top of the screen, usually occluded by the keyboard.&lt;/p&gt;

&lt;p&gt;The typical struggle to get to the last input fields and the submit button may look like this&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/forms1.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;There is no guidance on how to approach this. Take a look at the Store app on Windows 10 mobile, the perfect example of bad UI and UX directly from Microsoft and try review an app. You fill in the title of the review, then struggle to go into the review text input, you have to tap somewhere above the input to hide the keyboard, but not to hit the stars control &amp;hellip; just an UX disaster.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;There is one simple thing you can do to make the experience much better for the user. When the keyboard appears on the screen, take the area of the screen than contains the input and add it a bottom margin corresponding to the height of the keyboard. This will make the whole screen longer and all the inputs and the submit button will be available while scrolling without the need to hide the keyboard.&lt;/p&gt;

&lt;p&gt;The whole experience becomes much better&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/forms2.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;Implementation is also simple.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/250de623e9213bc3bf90.js&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>Using Tooltips to make better menus in Windows apps</title>
      <link>https://blog.davidmacias.com/using-tooltips-to-make-better-menus-in-windows-apps/</link>
      <pubDate>Wed, 23 Mar 2016 09:29:12 +0100</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/using-tooltips-to-make-better-menus-in-windows-apps/</guid>
      <description>&lt;p&gt;If you use Windows apps with navigation menus consisting of icons, you may have noticed that some of those apps show you a text when hovering above those icons. This is a nice touch for the users, allowing them to quickly grasp the meaning of the menu icons without the need to click them or to expand the menu (if available).&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/tooltips.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;Implementing this kind of hovers is really easy thanks to the &lt;code&gt;ToolTipService&lt;/code&gt; that is available in Windows 8.1 and Windows 10 UWP. You can add &lt;code&gt;&amp;lt;ToolTipService.ToolTip&amp;gt;&lt;/code&gt; with any element and include basically any XAML content as the tooltip. Here is a sample from the animation using a simple localized &lt;code&gt;TextBlock&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/c7320d81f9b882bcfd69.js&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>Choosing an image from gallery or camera a bit better in Universal Windows apps</title>
      <link>https://blog.davidmacias.com/choosing-an-image-from-gallery-or-camera-in-uwp/</link>
      <pubDate>Mon, 14 Mar 2016 09:29:12 +0100</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/choosing-an-image-from-gallery-or-camera-in-uwp/</guid>
      <description>&lt;p&gt;When developing Windows Phone apps you may encounter a use case when you have to allow the user to either pick a photo from the photos gallery in the photo or a take a new photo using the phone&amp;rsquo;s camera. One example of this may be the registration process when the user may choose a profile picture.&lt;/p&gt;

&lt;p&gt;In Windows Phone 8.1, this task is quite simple, just use the &lt;code&gt;FileOpenPicker&lt;/code&gt;. It allows you to pick a photo from the gallery or take a new photo. Just take a look at this animation showing how the users takes a new photo using the phone&amp;rsquo;s camera.&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/wpa81.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The code for this is relatively simple, although the &lt;code&gt;AndContinue&lt;/code&gt; pattern can be a pain&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/2885b4a6faa5b0861f17.js?file=pick-wpa81.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;In Windows 10 Mobile, the &lt;code&gt;FileOpenPicker&lt;/code&gt; has been changed to be more customizable. This make the process of  taking a new photo using the phone&amp;rsquo;s camera totally hidden. Not a chance a common user will discover it, just take a look at this animation.&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/uwp.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;So how to make this experience a bit better for the user? My solution is instead of launching the &lt;code&gt;FileOpenPicker&lt;/code&gt; showing a &lt;code&gt;Flyout&lt;/code&gt; with two options; Choose from gallery and Take photo. The Choose from gallery option just launches the &lt;code&gt;FileOpenPicker&lt;/code&gt;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/2885b4a6faa5b0861f17.js?file=pick-uwp.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;and the Take photo option uses CameraCaptureUI to directly take a photo&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/2885b4a6faa5b0861f17.js?file=camera-uwp.cs&#34;&gt;&lt;/script&gt;       

&lt;p&gt;The result might look like this. Do not forget to add an option to delete the photo if one is already chosen.&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/uwp2.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;</description>
    </item>
    
    <item>
      <title>Using Hockey App to distribute Windows Phone apps</title>
      <link>https://blog.davidmacias.com/using-hockey-app-to-distribute-windows-phone-apps/</link>
      <pubDate>Tue, 16 Feb 2016 09:29:12 +0100</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/using-hockey-app-to-distribute-windows-phone-apps/</guid>
      <description>&lt;p&gt;Distributing Windows Phone apps to testers has always been a pain. The Private Beta in the Windows Store intended for this is not very flexible and it got much worse with Windows 10 (generating promotional code that can take up to 24 hours).&lt;/p&gt;

&lt;p&gt;One of the better ways to solve the beta build distribution is using a service like &lt;a href=&#34;http://hockeyapp.net/&#34;&gt;Hockey App&lt;/a&gt;, that Microsoft recently acquired. To be able to use Hockey App (or any other service) you need to &lt;a href=&#34;https://products.websecurity.symantec.com/orders/enrollment/microsoftCert.do&#34;&gt;buy a $299 certificate from Symantec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You then use the certificate to sign the XAP or APPX files of your app. Those signed binaries can be than installed on devices with the correct application enrollment token directly from Hockey App, bypassing the Windows Store.&lt;/p&gt;

&lt;p&gt;One of my clients got persuaded to try this approach after some problem with the Windows Store Private Beta and bough the certificate. It took a week for the purchase to go through and another week to finally get the certificate in the correct PFX format from Symantec.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adding password to the PFX certificate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The PFX certificate file I got had an empty password. This is quite a problem for all the Microsoft tools that work with certificates, especially for XapSignTool. I could not make the tools work with an empty password so I had to change the password first. This is done quite easily using using OpenSSL.&lt;/p&gt;

&lt;div data-gist=&#34;24cb76710fc7d6c9f2cb&#34; data-file=&#34;pwd.bat&#34;&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Generating application enrollment token&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To allow the devices to install the signed XAP (or APPX) you need to generate an application enrollment token that will be installed on the devices. The process is quite simple, just call&lt;/p&gt;

&lt;div data-gist=&#34;24cb76710fc7d6c9f2cb&#34; data-file=&#34;aet.bat&#34;&gt;&lt;/div&gt;

&lt;p&gt;as a result you will get three files: AET.aet, AET.aetx, AET.xml. Get the AET.aetx file and upload it to Hockey App by clicking Add version and drag and dropping the file to the upload dialog. The company profile for your app in Hockey App will get updated using this file. This is done only once.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Signing the binary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Each time you submit a new build to Hockey App, you need to sign the binary (XAP in my case) with the certificate. The &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/apps/dn168929(v=vs.105).aspx&#34;&gt;signing process differs for XAP and APPX files&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For XAP files it is just calling the right PowerShell script with the correct parameters&lt;/p&gt;

&lt;div data-gist=&#34;24cb76710fc7d6c9f2cb&#34; data-file=&#34;sign.bat&#34;&gt;&lt;/div&gt;

&lt;p&gt;and the result is .. an error &lt;code&gt;Signtool Error: This file format cannot be signed because it is not recognized&lt;/code&gt;. So I had to do some research. I found a &lt;a href=&#34;https://stackoverflow.com/questions/20970686/error-signing-windows-phone-xap-file-signtool-error-this-file-format-cannot&#34;&gt;developer describing the same problem on StackOverflow&lt;/a&gt;. The solution was to install &lt;a href=&#34;http://downloads.tomsguide.com/silverlight-microsoft,0301-10659.html&#34;&gt;Silverlight 5.1.30514.0&lt;/a&gt;. This was really strange, it is a Silverlight runtime not an SDK and it does not get installed with Visual Studio or the Windows Phone SDK.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Distributing the app&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you upload a signed binary to Hockey App, your testers can download it using a web browser to their devices. Each device needs to install the company profile (the application enrollment token) once, and then can install the builds you provide.&lt;/p&gt;

&lt;p&gt;Installation of the Windows Phone app builds is a bit strange, no install progress or success messages, the app just appears in the list ofter one or two minutes. But it works, and it is much faster and more flexible than the Private Beta provides by the Windows Store.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to handle localization strings provided by the client in a Windows Phone app</title>
      <link>https://blog.davidmacias.com/how-to-handle-localization-strings-provided-by-client/</link>
      <pubDate>Tue, 09 Feb 2016 09:29:12 +0100</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/how-to-handle-localization-strings-provided-by-client/</guid>
      <description>&lt;p&gt;I currently work on a Windows Phone 8.1 app for a client with an interesting approach to app localization. They have a Google Docs sheet with all the localization string for the app in all the supported languages and a tool that converts this localization strings in to per-language versioned JSON files. The generated JSON files are kept in a git repository. The Android, iOS and now my Windows Phone app should have the git repository added as a submodule. When a new version of the JSON files with the localization appear in the submodule, the app should use them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deciding the localization approach&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the old days of Windows Phone 7 and Windows Phone 8 I would simply write an utility that reads the newest version of the JSON localization files and generate a RESX file for each language. RESX is XML format that is simple to generate. If you had a localized string with a key say Game, you would put it everywhere when the localization of the word game was needed. Simple&lt;/p&gt;

&lt;p&gt;In Windows Phone 8.1 (and 10) you should use RESW files for localization. This is the new x:Uid approach that, in my honest opinion, really sucks. It forces you to duplicate string if you use I string in multiple places, there is no design time support, you never know what UI element are localized and what you forgot to localize. Simply put, it is a mess. This approach is not usable at all with the string client provides.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;There is no way to make any script generate a RESW file with duplicated string matching the multiple usages of each string. If you have a localized string with a key Game and 2 TextBlocks and 1 Buttons that use it, you need to put it into the RESW file 3 times, once for each UI element. SO instead of a Game key, you would have a GameTextBlock.Text key, an AnotherGameTextBlock.Text and a GameButton.Content key, all with the same value and applied in design time. Madness.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using RESX files on Windows Phone 8.1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One approach to solve this problem is to use the good old RESX files with your Windows Phone 8.1 project. Typically by creating a Portable Class Library (PCL) with the RESX files, doing a bit of configuration for the supported languages and linking this PCL project to your Windows Phone 8.1 project. You can find a few articles about this approach online and also a few gotchas and their solutions. It sounds like a good idea at first, but it is too problematic for my tastes.&lt;/p&gt;

&lt;p&gt;I tried this approach but ended frustrated with too many problems too solve, like Visual Studio hanging when deploying to a device when using RESX files. So I decided to go with a custom solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Generating Windows Phone 8-like localization strings&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally I decided to generate a class that would look and behave similar to the old Windows Phone 8-like localization strings class. The idea is quite simple, no need to a PCL or any RESX files.&lt;/p&gt;

&lt;p&gt;The first step is to create a directory and empty RESW files for each supported language in the Windows Phone 8.1 project&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/languages.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;Then write a script that generates all the RESW files from the newest JSON localization files&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/53a29b6e2143cac1ec8a.js?file=localization-converter-1.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;Now with the RESW files populated with all the localization string it is time to put them to use. First I created a &lt;code&gt;LocalizedStrings&lt;/code&gt; class very similar to the one in Windows Phone 8:&lt;/p&gt;

&lt;div data-gist=&#34;53a29b6e2143cac1ec8a&#34; data-file=&#34;LocalizedStrings.cs&#34;&gt;&lt;/div&gt;

&lt;p&gt;and added it to &lt;code&gt;App.xaml&lt;/code&gt; as a dictionary resources called &lt;code&gt;S&lt;/code&gt;&lt;/p&gt;

&lt;div data-gist=&#34;53a29b6e2143cac1ec8a&#34; data-file=&#34;App.xaml&#34;&gt;&lt;/div&gt;

&lt;p&gt;The interesting ans still missing part is the &lt;code&gt;AppResources&lt;/code&gt; class referenced in &lt;code&gt;LocalizedStrings&lt;/code&gt;. It is a partial class, consisting of &lt;code&gt;ResourceLoader&lt;/code&gt; instance to get the string at runtime and a Singleton to get the string from C# code&lt;/p&gt;

&lt;div data-gist=&#34;53a29b6e2143cac1ec8a&#34; data-file=&#34;AppResources.cs&#34;&gt;&lt;/div&gt;

&lt;p&gt;The second part of this class is generated by the same script that generates the RESW files. For each key in the localization string, it generates a property like this in the &lt;code&gt;AppResources&lt;/code&gt; class&lt;/p&gt;

&lt;div data-gist=&#34;53a29b6e2143cac1ec8a&#34; data-file=&#34;AppResources.strings.cs&#34;&gt;&lt;/div&gt;

&lt;p&gt;The code to generate this is part of the script&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/53a29b6e2143cac1ec8a.js?file=localization-converter-2.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;The result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you put all this pieces together, you have a RESW files with all the localization strings and a localization class that can be generated on demand. I run the script and generate the files every time there is an update in the git submodule with the JSON localization files.&lt;/p&gt;

&lt;p&gt;When I want to use any of these localization string in XAML, I simply use it like this&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/53a29b6e2143cac1ec8a.js?file=xaml-usage.xaml&#34;&gt;&lt;/script&gt;

&lt;p&gt;Using a binding allows me to use to use the same localization keys for many elements and I do not have to duplicate the keys like in the x:Uid scenario.&lt;/p&gt;

&lt;p&gt;If I need to used a localization string in C#, I have a strongly typed access to it&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/53a29b6e2143cac1ec8a.js?file=csharp-usage.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;instead of creating a &lt;code&gt;ResourceLoader&lt;/code&gt; instance and calling &lt;code&gt;GetString&lt;/code&gt; with a string parameter.&lt;/p&gt;

&lt;p&gt;Another approach would be having a public property with the &lt;code&gt;AppResources&lt;/code&gt; instance in a &lt;code&gt;ViewModel&lt;/code&gt; base class, it would make the binding shorter.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mobilize.net: Converting Windows Phone 8 apps to UWP? Not really</title>
      <link>https://blog.davidmacias.com/mobilize-net-converting-windows-phone-apps-to-uwp/</link>
      <pubDate>Fri, 18 Dec 2015 09:29:12 +0100</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/mobilize-net-converting-windows-phone-apps-to-uwp/</guid>
      <description>&lt;p&gt;When Microsoft announced the Windows 10 developer platform, they also announced bridges to make porting apps from Android, iOS and Web easier. Those bridges are now either dead (Android) or unusable (iOS) but there is another tool that can be considered a bridge left. It is called &lt;a href=&#34;http://www.mobilize.net/download-silverlight-bridge&#34;&gt;Mobilize.net Silverlight&lt;/a&gt; Bridge and it is not from Microsoft. It promises converting existing Windows Phone 8 (Silverlight apps) to the Universal Windows Platform. Considering the majority of apps in the Windows Phone Store are Windows Phone 8 apps and the fact that Android and iOS developers do not really care about Windows, Mobilize.net seem to be the most useful of the bridges, because there is no easy porting apps from Windows Phone 8 to UWP, just rewriting. So I tried it out.&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/Windows10-Devices.png?t=1449725816496&amp;amp;width=425&amp;amp;height=210&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;Mobilize.net is currently in technical preview. After you download and install it, it integrates into Visual Studio 2015 and there is a new context menu for Windows Phone 8 project, allowing you to convert them to UWP apps. If you use it, you get a dialog windows and a conversion process that will fail most of the times with a strange error. At least for me it did.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I got in touch with their support and I found out the reason for the conversion always failing. They do not support C# 6 all and mine, and probably all yours, project use C# 6. If you look at the error logs a bit closer, you will see error messages about failed tokenization. This is really strange, it looks like they are parsing the source code as text, instead of just using Roslyn. I do not get why, but they probably have a reason for this.&lt;/p&gt;

&lt;p&gt;If you go through all the trouble and remove all the C# 6 features from your project, the conversion will succeed. You will get a UWP project, that will most likely not compile. There are two main reasons for this.&lt;/p&gt;

&lt;p&gt;Mobilize.net changes your XAML to fix namespaces and replace controls that changed since Windows Phone 8, but it does not fix XAML features that were not available in UWP. And there are quite a few of them, from StringFormat in bindings to OpacityMask on images. You will have to fix your XAML manually and while you are at this, you will also have to rewrite your XAML to accommodate for the fact that there is not just one fixed resolution like it was in Windows Phone 8. Your XAML has to be responsive now. Mobilize.net did not really help here.&lt;/p&gt;

&lt;p&gt;The seconds problem are third party libraries. There are &lt;a href=&#34;https://github.com/MobilizeNet/UWPConversionMappings&#34;&gt;some mappings available for popular third party libraries&lt;/a&gt;. This mapping do two things. First they make sure the UWP project uses the correct Nuget packages and then they map namespaces, both in XAML and C#, that changed when the third party library transitioned from Windows Phone 8 to UWP. Chances are that there are no UWP versions of some or even the majority of the third party libraries you use. Probably because the functionality is nor longer available all the API has completely changed.&lt;/p&gt;

&lt;p&gt;I reached out to the Mobilize.net support asking about these two things, but I never got an answer.&lt;/p&gt;

&lt;p&gt;In conclusion, if your app is not trivial, you use C# 6, third party libraries and all the available XAML features, your experience will not be very good. If you app is well written (MVVM, abstractions) your are better with creating a new UWP project, pasting your code and rewriting your XAML. If your app is more trivial, Mobilize.net will probably work well for you. But in this case, rewriting your app to UWP without it would be probably takes the same amount of time.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Detecting gestures over WebView on Windows Phone</title>
      <link>https://blog.davidmacias.com/detecting-gestures-over-webview-on-windows-phone/</link>
      <pubDate>Mon, 07 Dec 2015 09:29:12 +0100</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/detecting-gestures-over-webview-on-windows-phone/</guid>
      <description>&lt;p&gt;If you develop Windows Phone apps, you surely had to use the WebView component at least once. Any you must have realized, that it kind of sucks. One of the problems is that it swallows all the gestures and manipulation events. This means you cannot put it into a Pivot, you cannot detect swipe left or right events to navigate to next or previous article .. or can you?&lt;/p&gt;

&lt;p&gt;In a recent project, I had to implement exactly the mentioned functionality, swiping between articles displayed in a WebView. I did some research and I could not find any solution. So I had to get creative and I find a way involving JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The idea was simple. If you cannot recognize the swipe event over the WebView in your C#/XAML, why not try to recognize them in the WebView? I did some research and found a JavaScript library that works on Windows Phone. The library is &lt;a href=&#34;https://hammerjs.github.io/&#34;&gt;Hammer&lt;/a&gt; and it recognizes all the basic gestures, including swiping left and right.&lt;/p&gt;

&lt;p&gt;First you include Hammer into your HTML, then you set it up to listen over an HTML element and lastly you subscribe to events you are interested in. The only reasonable action you can execute is notify the WebView using the &lt;code&gt;window.external.notify&lt;/code&gt; function.&lt;/p&gt;

&lt;div data-gist=&#34;f7c559775ef3e57906ed&#34;&gt;&lt;/div&gt;

&lt;p&gt;The C#/XAML part of the solution consists just of handling the WebView&amp;rsquo;s &lt;code&gt;ScriptNotify&lt;/code&gt; event and implementing your action according to the value you receive.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Highlighting letters in TextBlock in Windows Phone 8.1 and Windows 8.1</title>
      <link>https://blog.davidmacias.com/highlighting-letters-in-textblock-in-windows-phone-8-1-and-windows-8-1/</link>
      <pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/highlighting-letters-in-textblock-in-windows-phone-8-1-and-windows-8-1/</guid>
      <description>&lt;p&gt;In my current project I had to implement an interesting feature for both Windows Phone 8.1 and Windows 8.1 project of the Universal app. The idea is simply. The users want to search for a movie. They enter a search term into a TextBox and a list of results is shown. The results should have the search term highlighted in them.&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/highlighting.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The standard TextBlock used to display the movie titles does not support any kind of letter highlighting, so I had to write a custom one. I created a custom UserControl. The UserControl contains a few dependency properties Text, HighlightedText, HighlightBrush and a TextBlock. When Text or HighlightedText change, the Text is then split into multiple Runs that are added to the TextBlock.&lt;/p&gt;

&lt;div data-gist=&#34;87b051f2f3a54bf895f0&#34;&gt;&lt;/div&gt;

&lt;p&gt;The whole working custom control is available at Github: &lt;a href=&#34;https://github.com/igorkulman/Kulman.WPA81.HighlightTextBox&#34;&gt;https://github.com/igorkulman/Kulman.WPA81.HighlightTextBox&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Strange combination of HTTPS and Windows Phone 8.1 that can make your app and phone freeze</title>
      <link>https://blog.davidmacias.com/strange-combination-of-https-and-windows-phone-8-1-that-can-make-your-app-and-phone-freeze/</link>
      <pubDate>Fri, 11 Sep 2015 00:00:00 +0000</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/strange-combination-of-https-and-windows-phone-8-1-that-can-make-your-app-and-phone-freeze/</guid>
      <description>&lt;p&gt;Last week I came upon a really bizarre problem that you may also find interesting. Lets start with a bit of context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tl;Dr&lt;/strong&gt;: There seems to be a bug in Windows phone 8.1 that can make your app and the phone freezes when displaying images over HTTPS from some servers. Skip to &lt;a href=&#34;#bug&#34;&gt;the end of this article&lt;/a&gt; to see a video and get the source code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Windows Phone app&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The app is a Windows Phone 8 shopping app for the biggest Czech online retailer. The main screen of the app contains quite a bit of data, usually about ten carousel with about 10 products and the list of main categories, so about 10 more images.&lt;/p&gt;

&lt;p&gt;In worst case the main screen contains over 10 hundred images. It was quite a hassle to make it work well in the Windows Phone 8 SDK (no, rewriting a shopping about with about 70 screens to Windows Phone 8.1 is not feasible). But it work juts fine. Until last week.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The problem&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last week, users started to report that the app freezes on the main screen, sometime making the whole phone freeze. This was really bad. Frozen app means not only angry customers but customer that do not buy stuff. So I started to investigate.&lt;/p&gt;

&lt;p&gt;First I thought there may be a problem in the app, although the app was last updated more than a month ago and the problem started only last week. Everything worked fine in the emulator, the problem was reproducible only on real devices. I tried showing only one carousel to make the app render much less data, did not help. I tried making the app show only one product in the only one carousel, still a problem. So it looked like the images were the problem. I tried replacing all the real image urls with random images from &lt;a href=&#34;http://lorempixel.com&#34;&gt;lorempixel.com&lt;/a&gt; and the app worked just fine.&lt;/p&gt;

&lt;p&gt;I determined that the source of the problems are the images on the server. Talking with the server customer&amp;#8217;s people I found out that the images on the server were exchanged for bigger one because of the iPhones. But it did not make sense. I tried using much bigger random images and the app worked fine. I tried downloading the images and using them locally, the app worked fine.&lt;/p&gt;

&lt;p&gt;&lt;strong id=&#34;bug&#34;&gt;Windows Phone 8.1 bug?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally I found out that the app worked the whole time on phones with Windows 10, only phones with Windows Phone 8.1 were affected. Android and iOS apps that the customer has also never experienced this problem. This make me thing that there is some kind of bug in Windows Phone 8.1 that causes this behavior, because the app does not do any image processing, it only uses an Image control and sets is Source url.&lt;/p&gt;

&lt;p&gt;Here is a sample app to reproduce the problem: &lt;a href=&#34;https://github.com/igorkulman/WindowsPhoneHttpsImageBug&#34;&gt;https://github.com/igorkulman/WindowsPhoneHttpsImageBug&lt;/a&gt;. The solution contains a Windows Phone 8 project and a Windows Phone 8.1. Both apps suffer from the sample problem, but the problem is worse in the Silverlight app. This also makes me think that this is a Windows Phone 8.1 bug, independent on the Windows Phone SDK version.&lt;/p&gt;

&lt;p&gt;I made a video using the sample app showing the problem&lt;/p&gt;

&lt;div class=&#34;embed video-player&#34;&gt;
&lt;iframe src=&#34;https://player.vimeo.com/video/138747871&#34; width=&#34;640&#34; height=&#34;385&#34; frameborder=&#34;0&#34; webkitAllowFullScreen mozallowfullscreen allowFullScreen&gt;&lt;/iframe&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Microsoft’s Outlook on Android and iOS</title>
      <link>https://blog.davidmacias.com/microsofts-outlook-on-android-and-ios/</link>
      <pubDate>Thu, 10 Sep 2015 00:00:00 +0000</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/microsofts-outlook-on-android-and-ios/</guid>
      <description>&lt;p&gt;To those who don’t know, Microsoft launched several months ago Outlook for Android and iOS phones and tablets. Microsoft’s new brand of Outlook have replace the failing “Outlook-branded apps” that are only available to the current subscribers of Office 365. The upheaval comes after Microsoft acquired San Francisco-based company, &lt;a href=&#34;https://www.acompli.com/&#34;&gt;Acompli.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.davidmacias.com/images/Outlook-Best-New-Apps.png&#34; class=&#34;pure-img-width&#34;&gt;&lt;/p&gt;

&lt;p&gt;Acompli is an “advanced email application that empowers professionals to do more with emails, full calendaring, easy file sharing and log all the important people in one email format.” The format supports Microsoft’s Office 365, Gmail and Google Apps.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Microsoft’s plan is for both the Accompli and the new Outlook app to replace the rather dated Outlook-branded apps. The newfangled Outlook app is primarily based on the technology from the Acompli app that the company acquired for $200 million. Microsoft stated that it was a major factor in buying the app, as its staff could then make up the core group of engineers needed to drive the new Outlook app forward.&lt;/p&gt;

&lt;p&gt;It’s no surprise that Microsoft is shifting its focus from PC-installed base as &lt;a href=&#34;http://www.geekwire.com/2014/flurry-report-mobile-phones-162-minutes/&#34;&gt;GeekWire.com&lt;/a&gt; reports that a study showed Americans spend approximately 162 minutes a day on their phones browsing. And with Gaming Realms, the developer behind the entertainment medium &lt;a href=&#34;https://www.pocketfruity.com/casino&#34;&gt;PocketFruity.com&lt;/a&gt;, claiming that the global smartphone use has now reached 17%, apps are seeing a spike regarding financial investments and support.&lt;/p&gt;

&lt;p&gt;It will be interesting to see how well the new Outlook app is received after a year or so. With the app retaining many of the features that its recent acquisition Acompli successfully exhibited, there’s a possibility that the consumer base may just stay with the Acompli until Outlook perfects the new app further, and add features that will set it apart from other leading email applications.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Problems getting paid from the Windows Store, again</title>
      <link>https://blog.davidmacias.com/problems-getting-paid-from-the-windows-store-again/</link>
      <pubDate>Tue, 21 Jul 2015 00:00:00 +0000</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/problems-getting-paid-from-the-windows-store-again/</guid>
      <description>&lt;p&gt;I do not make much money on my Windows Phone apps (who does?), but when the payout time comes every couple of months, I expect the money to be delivered. Dealing with Microsoft, I should know better.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Failed payment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last month I looked into the Dev Center and saw that my scheduled payment failed, telling me to contact the support. So I did. The result was one moth of exchanging email without a solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dealing with support&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Microsoft employee told me that I am in a small group of people with this problem. I do not know if I have such a bad look always be in a problematic supposedly small group, or that the group are not that small. He told me that Microsoft will retry the payment. The payment was supposedly retried on June 24th and succeeded. So they say.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Great news, your June payout was returned due to an internal issue; however, the payout of 5264.17 CZK has been re-attempted and was successfully completed on June 24th. If you have not received the payout then please review this transaction with your bank. Please let me know if you have any further questions.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I never got the money. The employee asked me a few times if I got the money and then resigned, telling me that it is my problem and I should check with my bank. Of course I checked with my bank, they do not have the money. If they had, they would transfer it to my account.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Will it happen again?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So the support is not helpful, I think I will never see this money and I can just hope the next payment in a couple of months will be successful. Will it?&lt;/p&gt;

&lt;p&gt;I took a look at my payout settings in the new Dev Center and it is a mess&lt;/p&gt;

&lt;img src=&#34;https://blog.davidmacias.com/images/payout.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;It previous pages is telling my that everything is ok and my data is valid, but is it? Those four radios do not give me the confidence to believe it. Especially seeing my old account (x3168) that was there in the Windows Store and I deleted it. I used to get the payment to the x0026 account that was in my Windows Phone Store account.&lt;/p&gt;

&lt;p&gt;Funny thing about this form, I never found out how to delete this old account. If you select it, you can only edit it, no way to delete it. If I select the correct account and click save, nothing changes, the radios all remain unselected. I do now know it is a bug or another great Microsoft UI.&lt;/p&gt;

&lt;p&gt;So I guess maybe the next payment will also get lost somewhere ..&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Removing unused strings from Windows Phone 8 RESX files</title>
      <link>https://blog.davidmacias.com/removing-unused-strings-from-windows-phone-8-resx-files/</link>
      <pubDate>Mon, 25 May 2015 00:00:00 +0000</pubDate>
      <author>igor@kulman.sk (davidmacias)</author>
      <guid>https://blog.davidmacias.com/removing-unused-strings-from-windows-phone-8-resx-files/</guid>
      <description>&lt;p&gt;Using RESX files is the standard approach to Windows Phone 8 app localization, it is even contained in the standard project templates. When you work on a project for a longer time, you may get to a situation that your RESX files contain strings that you no longer use. This is a problem especially when you want to add a new localization, because it is slower and kind of wasteful localizing unused strings.&lt;/p&gt;

&lt;p&gt;To solve this problem I have created a simple command line utility, that is &lt;a href=&#34;https://github.com/igorkulman/RemoveUnusedResources&#34;&gt;available at Github&lt;/a&gt;. This utility assumes that you use the standard localization approach from the templates (AppResources.{lang}.resx and LocalizedStrings.{value} in XAML).&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The usage is really simple. Just run the utility with the path to your project as a parameter. It will detect all resources files and remove all the unused strings from them.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>